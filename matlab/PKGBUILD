# Maintainer: Batuhan Baserdem <lastname dot firstname at gmail>
# Contributor: Me

## For MATLAB version 2020a
## Source: https://github.com/bbaserdem/Matlab/blob/master/PKGBUILD
##
## This PKGBUILD creates an Arch Linux package for MATLAB
## In order to build the package the user must supply;
##      matlab.fik : Plain text file installation key
##      matlab.lic : License file
##      matlab.tar : Software tarball
## FILE INSTALLATION KEY & LICENSE FILE:
## https://www.mathworks.com/help/install/ug/install-using-a-file-installation-key.html
##      File installation key identifies this specific installation of matlab.
##      The license file authorizes that this key can use the toolboxes.
##      Go to License center on mathworks website;
##          https://www.mathworks.com/licensecenter
##      On install and activate tab; select (or create) an appropriate license
##      Navigate to download the license file and the file installation key
##      Download the license file and put the file in the repository
##      Copy paste the file installation key in a plain text file
## GETTING TARBALL
##      As of 2020a release; this is much easier.
##    !!On arch, to run the installer, libselinux is needed.
##      Download the matlab installer, after logging in and accepting license;
##          Advanced Options > I want to download without installing
##      NOTE Extract the matlab installer zip file with
##          `unzip -X -K matlab_R2020a_glnxa64.zip` to avoid errors.
##      Download the files to an empty directory called matlab
##      Run following;
##          tar --create --verbose --file ../matlab.tar matlab
## LARGE FILES
##      To transport large files in fat32 media; use split and cat;
##          split --bytes 3G --numeric-suffixes=0 matlab.tar matlab.tar.
##          cat matlab.tar.* > matlab.tar
##
## If MATLAB does not launch due to activation problems, launch
## /opt/mathworks/matlab-r2020a/bin/activate_matlab.sh
##
## Issues:
## - https://www.reddit.com/r/archlinux/comments/ichto5/cannot_install_matlab_r2020a_with_pango_146/
## - .X release of Python break matlab (TODO Document how to fix this issue
## without reinstallation of matlab)

pkgname=matlab
_release="r2020a"
instdir="/opt/mathworks/${pkgname}-${_release}"
pkgver=9.8.0.1323502
pkgrel=1
pkgdesc='A high-level language for numerical computation and visualization'
arch=('x86_64')
url='http://www.mathworks.com'
license=(custom)
makedepends=('gendesk' 'python' 'findutils' 'libselinux')
# For 2020a; from https://hub.docker.com/r/mathworks/matlab-deps/dockerfile
# Some of the dependencies are probably not needed; contact the maintainer please
depends=(
    'glib2'
    'ca-certificates'
    'lsb-release'
    'alsa-lib'
    'atk'
    'libcap'
    'libcups'
    'libdbus'
    'fontconfig'
    'libgcrypt'
    'gdk-pixbuf2'
    'gst-plugins-base'
    'gstreamer'
    'gtk2'
    'krb5'
    'nspr'
    'nss'
    'pam'
    'pango'
    'cairo'
    'libselinux'
    'libsm'
    'libsndfile'
    'libx11'
    'libxcb'
    'libxcomposite'
    'libxcursor'
    'libxdamage'
    'libxext'
    'libxfixes'
    'libxft'
    'libxi'
    'libxmu'
    'libxrandr'
    'libxrender'
    'libxslt'
    'libxss'
    'libxt'
    'libxtst'
    'libxxf86vm'
    'procps-ng'
    'xorg-server-xvfb'
    'x11vnc'
    'sudo'
    'zlib')
# These I got from arch before and afraid to play around.
# GCC: https://www.mathworks.com/support/requirements/supported-compilers.html
depends+=(
    'gcc6-fortran'
    'gcc6-gcj'
    'gconf'
    'glu'
    'gstreamer0.10-base'
    'libunwind'
    'libxp'
    'libxpm'
    'portaudio'
    'qt5-svg'
    'qt5-webkit'
    'qt5-websockets'
    'qt5-x11extras'
    'xerces-c')
provides=('matlab-licenses' 'matlab-engine-for-python' 'matlab-bin')
source=("matlab.tar"
        "matlab.fik"
        "matlab.lic"
        "matlab.script")
md5sums=("SKIP"
         "SKIP"
         "SKIP"
         "019a23c73f95f7bc81c4e62d571d0a2d")

# To perform partial install, set to true and modify the products list
# Visit https://www.mathworks.com/products.html for all products
partialinstall=true
products=(
    "MATLAB"
    # Uncomment the toolboxes (all those available) that you want
    # "Simulink"
    # "5G_Toolbox"
    # "AUTOSAR_Blockset"
    # "Aerospace_Blockset"
    # "Aerospace_Toolbox"
    # "Antenna_Toolbox"
    # "Audio_Toolbox"
    # "Automated_Driving_Toolbox"
    # "Bioinformatics_Toolbox"
    # "Communications_Toolbox"
    # "Computer_Vision_Toolbox"
    "Control_System_Toolbox"
    "Curve_Fitting_Toolbox"
    "DSP_System_Toolbox"
    # "Data_Acquisition_Toolbox"
    # "Database_Toolbox"
    # "Datafeed_Toolbox"
    # "Deep_Learning_Toolbox"
    # "Econometrics_Toolbox"
    # "Embedded_Coder"
    # "Filter_Design_HDL_Coder"
    # "Financial_Instruments_Toolbox"
    # "Financial_Toolbox"
    # "Fixed-Point_Designer"
    # "Fuzzy_Logic_Toolbox"
    # "GPU_Coder"
    # "Global_Optimization_Toolbox"
    # "HDL_Coder"
    # "HDL_Verifier"
    # "Image_Acquisition_Toolbox"
    # "Image_Processing_Toolbox"
    "Instrument_Control_Toolbox"
    # "LTE_Toolbox"
    # "MATLAB_Coder"
    # "MATLAB_Compiler_SDK"
    # "MATLAB_Compiler"
    # "MATLAB_Report_Generator"
    # "Mapping_Toolbox"
    # "Mixed-Signal_Blockset"
    # "Model_Predictive_Control_Toolbox"
    # "Model-Based_Calibration_Toolbox"
    # "Motor_Control_Blockset"
    # "Navigation_Toolbox"
    # "OPC_Toolbox"
    # "Optimization_Toolbox"
    # "Parallel_Computing_Toolbox"
    # "Partial_Differential_Equation_Toolbox"
    # "Phased_Array_System_Toolbox"
    # "Powertrain_Blockset"
    # "Predictive_Maintenance_Toolbox"
    # "RF_Blockset"
    # "RF_Toolbox"
    # "ROS_Toolbox"
    # "Reinforcement_Learning_Toolbox"
    # "Risk_Management_Toolbox"
    # "Robotics_System_Toolbox"
    "Robust_Control_Toolbox"
    "Sensor_Fusion_and_Tracking_Toolbox"
    # "SerDes_Toolbox"
    "Signal_Processing_Toolbox"
    # "SimBiology"
    # "SimEvents"
    # "Simscape_Driveline"
    # "Simscape_Electrical"
    # "Simscape_Fluids"
    # "Simscape_Multibody"
    # "Simscape"
    # "Simulink_3D_Animation"
    # "Simulink_Check"
    # "Simulink_Code_Inspector"
    # "Simulink_Coder"
    # "Simulink_Compiler"
    # "Simulink_Control_Design"
    # "Simulink_Coverage"
    # "Simulink_Design_Optimization"
    # "Simulink_Design_Verifier"
    # "Simulink_Desktop_Real-Time"
    # "Simulink_PLC_Coder"
    # "Simulink_Real-Time"
    # "Simulink_Report_Generator"
    # "Simulink_Requirements"
    # "Simulink_Test"
    # "SoC_Blockset"
    # "Spreadsheet_Link"
    # "Stateflow"
    "Statistics_and_Machine_Learning_Toolbox"
    "Symbolic_Math_Toolbox"
    # "System_Composer"
    "System_Identification_Toolbox"
    # "Text_Analytics_Toolbox"
    # "Trading_Toolbox"
    # "Vehicle_Dynamics_Blockset"
    # "Vehicle_Network_Toolbox"
    # "Vision_HDL_Toolbox"
    # "WLAN_Toolbox"
    "Wavelet_Toolbox"
    # "Wireless_HDL_Toolbox"
)

prepare() {
    # Extract file installation key
    _fik=$(grep -o '[0-9-]*' "${srcdir}/${pkgname}.fik")

    # Modify the installer settings'
    _set="${srcdir}/${pkgname}/installer_input.txt"
    sed -i "s|^# destinationFolder=|destinationFolder=${srcdir}/build|" "${_set}"
    sed -i "s|^# fileInstallationKey=|fileInstallationKey=${_fik}|"     "${_set}"
    sed -i "s|^# agreeToLicense=|agreeToLicense=yes|"                   "${_set}"
    sed -i "s|^# licensePath=|licensePath=${srcdir}/matlab.lic|"        "${_set}"

    # Select products if partialinstall is set
    if [ "${partialinstall}" = 'true' ]; then
        for _prod in "${products[@]}"; do
            sed -i 's|^#\(product.'"${_prod}"'\)|\1|' "${_set}"
        done
    fi

    # Desktop file
    gendesk -f -n \
        --pkgname "${pkgname}" \
        --pkgdesc "${pkgdesc}" \
        --categories "Development;Education;Science;Mathematics;IDE" \
        --mimetypes "application/x-matlab-data;text/x-matlab" \
        --exec "matlab -desktop -nosplash"
}

build() {
    # Using the installer with the -inputFile parameter will automatically
    #   cause the installation to be non-interactive
    "${srcdir}/${pkgname}/install" -inputFile "${srcdir}/${pkgname}/installer_input.txt"

    # Create spoofing for Python API
    # https://aur.archlinux.org/packages/matlab-engine-for-python/
    cd "${srcdir}/build/extern/engines/python"
    # Getting appropriate python version for spoofing
    _matminor="$(find "${srcdir}/build/extern/engines/python" \
        -name 'matlabengineforpython3*.so' |
        sort |
        sed 's|.*matlabengineforpython3_\([0-9]\)\.so|\1|g' |
        tail -1)"
    echo 'import sys' > "${srcdir}/sitecustomize.py"
    echo "sys.version_info = (3, ${_matminor}, 0)" >> "${srcdir}/sitecustomize.py"
}

package() {
    # Install the python API
    # https://www.mathworks.com/help/matlab/matlab_external/install-the-matlab-engine-for-python.html
    cd "${srcdir}/build/extern/engines/python"
    PYTHONPATH="${srcdir}" python setup.py \
        install --root="${pkgdir}" --optimize 1
    # Spoofing trick to fool matlab into believing >=3.8<4.0 is supported
    _matminor="$(find "${srcdir}/build/extern/engines/python" \
        -name 'matlabengineforpython3*.so' |
        sort |
        sed 's|.*matlabengineforpython3_\([0-9]\)\.so|\1|g' |
        tail -1)"
    _prefix="$(python -c 'import sys; print(sys.prefix)')"
    _pytminor="$(python -c 'import sys; print(sys.version_info.minor)')"
    # Correct file names
    if [[ "${_pytminor}" != "${_matminor}" ]]; then
        mv "${pkgdir}/${_prefix}/lib/python3".{"${_matminor}","${_pytminor}"}
        _egginfo="$(ls "${pkgdir}/${_prefix}/lib/python3.${_pytminor}/site-packages/"*"-py3.${_matminor}.egg-info")"
        mv "${_egginfo}" "${_egginfo%py3."${_matminor}".egg-info}py3.${_pytminor}.egg-info"
        sed -i "s|sys.version_info|(3, $_matminor, 0)|" \
            "${pkgdir}/${_prefix}/lib/python3.${_pytminor}/site-packages/matlab/engine/__init__.py"
    fi
    # Fix erronous references in the _arch.txt files
    errstr="${srcdir}/build/extern/engines/python/"
    trustr="${instdir}/extern/engines/python/"
    for _dir in \
        "${srcdir}/build/extern/engines/python/build/lib/matlab/engine" \
        "${pkgdir}/${_prefix}/lib/python3.${_pytminor}/site-packages/matlab/engine" \
        ; do
        sed -i "s|${errstr}|${trustr}|" "${_dir}/_arch.txt"
    done

    # Moving files from build area
    install -dm 0755 "$(dirname "${pkgdir}/${instdir}")"
    mv "${srcdir}/build" "${pkgdir}/${instdir}"

    # Copying license
    install -D -m644 "${srcdir}/${pkgname}/license_agreement.txt" \
        "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"

    # Symlink executables'
    install -d -m755 "${pkgdir}/usr/bin/"
    for _executable in matlab; do
        ln -s "${instdir}/bin/${_executable}" "${pkgdir}/usr/bin/${_executable}"
    done
    # This would otherwise conflict with mixtex
    ln -s "${instdir}/bin/mex" "${pkgdir}/usr/bin/mex-${pkgname}"
    # Why is this in this directory, I wonder...
    ln -s "${instdir}/bin/glnxa64/mlint" "${pkgdir}/usr/bin/mlint"

    # Install desktop files
    install -D -m644 "${srcdir}/${pkgname}.desktop" \
        "${pkgdir}/usr/share/applications/${pkgname}.desktop"

    # Create backup directories
    install -d -m755 "${pkgdir}/${instdir}/backup/bin/glnxa64/mexopts"
    install -d -m755 "${pkgdir}/${instdir}/backup/sys/os/glnxa64"

    # Link mex options to ancient libraries
    sysdir="bin/glnxa64/mexopts"
    mkdir -p "${pkgdir}/${instdir}/backup/${sysdir}"
    cp "${pkgdir}/${instdir}/${sysdir}/gcc_glnxa64.xml" \
        "${pkgdir}/${instdir}/backup/${sysdir}/"
    sed -i "s/gcc/gcc-6/g" "${pkgdir}/${instdir}/${sysdir}/gcc_glnxa64.xml"
    cp "${pkgdir}/${instdir}/${sysdir}/g++_glnxa64.xml" \
        "${pkgdir}/${instdir}/backup/${sysdir}/"
    sed -i "s/g++/g++-6/g" "${pkgdir}/${instdir}/${sysdir}/g++_glnxa64.xml"
    cp "${pkgdir}/${instdir}/${sysdir}/gfortran.xml" \
        "${pkgdir}/${instdir}/backup/${sysdir}/"
    sed -i "s/gfortran/gfortran-6/g" "${pkgdir}/${instdir}/${sysdir}/gfortran.xml"
    cp "${pkgdir}/${instdir}/${sysdir}/gfortran6.xml" \
        "${pkgdir}/${instdir}/backup/${sysdir}/"
    sed -i "s/gfortran/gfortran-6/g" "${pkgdir}/${instdir}/${sysdir}/gfortran6.xml"

    # Remove unused library files
    # <MATLABROOT>/sys/os/glnxa64/README.libstdc++
    sysdir="sys/os/glnxa64"
    install -d -m755 "${pkgdir}/${instdir}/backup/${sysdir}"
    mv "${pkgdir}/${instdir}/${sysdir}/"{libstdc++.so.6.0.22,libstdc++.so.6} \
        "${pkgdir}/${instdir}/backup/${sysdir}/"
    mv "${pkgdir}/${instdir}/${sysdir}/libgcc_s.so.1" \
        "${pkgdir}/${instdir}/backup/${sysdir}/"
    mv "${pkgdir}/${instdir}/${sysdir}/"{libgfortran.so.3.0.0,libgfortran.so.3} \
        "${pkgdir}/${instdir}/backup/${sysdir}/"
    mv "${pkgdir}/${instdir}/${sysdir}/"{libquadmath.so.0.0.0,libquadmath.so.0} \
        "${pkgdir}/${instdir}/backup/${sysdir}/"

    # make sure MATLAB can find libgfortran.so.3
    install -d -m755 "${pkgdir}/${instdir}/backup/bin"
    cp "${pkgdir}/${instdir}/bin/matlab" "${pkgdir}/${instdir}/backup/bin"
    sed -i 's|LD_LIBRARY_PATH="`eval echo $LD_LIBRARY_PATH`"|LD_LIBRARY_PATH="`eval echo $LD_LIBRARY_PATH`:/usr/lib/gcc/x86_64-pc-linux-gnu/'$(pacman -Q gcc6 | awk '{print $2}' | cut -d- -f1)'"|g' "${pkgdir}/${instdir}/bin/matlab"

    # Install the script file to make scripting easier with matlab
    install -Dm 0755 "${srcdir}/matlab.script" "${pkgdir}/usr/bin/matscript"

    # From Arch Wikim: fix issues with live scripts and web browser rendering black screen
    ln -sf "/usr/lib/libgio-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libgio-2.0.so"
    ln -sf "/usr/lib/libgio-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libgio-2.0.so.0"
    ln -sf "/usr/lib/libglib-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libglib-2.0.so"
    ln -sf "/usr/lib/libglib-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libglib-2.0.so.0"
    ln -sf "/usr/lib/libgmodule-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libgmodule-2.0.so"
    ln -sf "/usr/lib/libgmodule-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libgmodule-2.0.so.0"
    ln -sf "/usr/lib/libgobject-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libgobject-2.0.so"
    ln -sf "/usr/lib/libgobject-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libgobject-2.0.so.0"
    ln -sf "/usr/lib/libgthread-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libgthread-2.0.so"
    ln -sf "/usr/lib/libgthread-2.0.so" "${pkgdir}/${instdir}/cefclient/sys/os/glnxa64/libgthread-2.0.so.0"
}
